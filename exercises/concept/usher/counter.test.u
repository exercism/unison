-- Test programs

program : Theater
program =
  runUsher = 'let usher [Ticket, Ticket] 10 (Main [])
  Counter.run 0 runUsher

programWithList : Theater
programWithList =
  attendees = [[Ticket, Ticket], [Ticket, Ticket, Ticket], [Ticket], [Ticket, Ticket, Ticket]]
  runUsher = 'let List.foldLeft (theater -> party -> usher party 10 theater) (Main []) attendees
  Counter.run 0 runUsher

programWithOverflow : Theater
programWithOverflow =
  attendees = [[Ticket, Ticket], [Ticket, Ticket, Ticket], [Ticket], [Ticket, Ticket, Ticket, Ticket, Ticket]]
  runUsher = 'let List.foldLeft (theater -> party -> usher party 10 theater) (Main []) attendees
  Counter.run 0 runUsher

programWithTotal : (Nat, Theater)
programWithTotal =
  attendees = [[Ticket, Ticket], [Ticket, Ticket, Ticket], [Ticket]]
  runUsher = 'let List.foldLeft (theater -> party -> usher party 10 theater) (Main []) attendees
  Counter.runWithTotal 0 runUsher

noCounter : Text
noCounter =
  counterNotCalled : '{Counter} Text
  counterNotCalled = 'let
    "counter ability is specified but not called"
  Counter.run 0 counterNotCalled

counter.test.ex1 =
  test.expect (program === Main [Ticket, Ticket])

counter.test.ex2 =
  test.expect (programWithList === Main[Ticket, Ticket, Ticket, Ticket, Ticket, Ticket, Ticket, Ticket, Ticket])

counter.test.ex3 =
  test.expect (programWithOverflow === Overflow[Ticket, Ticket, Ticket, Ticket, Ticket])

counter.test.ex4 =
  test.expect (programWithTotal === (6, Main [Ticket, Ticket, Ticket, Ticket, Ticket, Ticket]))

counter.test.ex5 =
  test.expect (noCounter === "counter ability is specified but not called")

test> tests = runAll [
  counter.test.ex1,
  counter.test.ex2,
  counter.test.ex3,
  counter.test.ex4,
  counter.test.ex5
]
