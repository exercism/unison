dndCharacter.modifier.test.ex1 = verify do
  labeled "computes the modifier for 18 to be 4" do
    expected = +4
    actual = modifier 18
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

dndCharacter.modifier.test.ex2 = verify do
  labeled "computes the modifier for 17 to be 3" do
    expected = +3
    actual = modifier 17
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

dndCharacter.modifier.test.ex3 = verify do
  labeled "computes the modifier for 16 to be 3" do
    expected = +3
    actual = modifier 16
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

dndCharacter.modifier.test.ex4 = verify do
  labeled "computes the modifier for 15 to be 2" do
    expected = +2
    actual = modifier 15
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

dndCharacter.modifier.test.ex5 = verify do
  labeled "computes the modifier for 14 to be 2" do
    expected = +2
    actual = modifier 14
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

dndCharacter.modifier.test.ex6 = verify do
  labeled "computes the modifier for 13 to be 1" do
    expected = +1
    actual = modifier 13
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

dndCharacter.modifier.test.ex7 = verify do
  labeled "computes the modifier for 12 to be 1" do
    expected = +1
    actual = modifier 12
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

dndCharacter.modifier.test.ex8 = verify do
  labeled "computes the modifier for 11 to be 0" do
    expected = +0
    actual = modifier 11
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

dndCharacter.modifier.test.ex9 = verify do
  labeled "computes the modifier for 10 to be 0" do
    expected = +0
    actual = modifier 10
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

dndCharacter.modifier.test.ex10 = verify do
  labeled "computes the modifier for 9 to be -1" do
    expected = -1
    actual = modifier 9
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

dndCharacter.modifier.test.ex11 = verify do
  labeled "computes the modifier for 8 to be -1" do
    expected = -1
    actual = modifier 8
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

dndCharacter.modifier.test.ex12 = verify do
  labeled "computes the modifier for 7 to be -2" do
    expected = -2
    actual = modifier 7
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

dndCharacter.modifier.test.ex13 = verify do
  labeled "computes the modifier for 6 to be -2" do
    expected = -2
    actual = modifier 6
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

dndCharacter.modifier.test.ex14 = verify do
  labeled "computes the modifier for 5 to be -3" do
    expected = -3
    actual = modifier 5
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

dndCharacter.modifier.test.ex15 = verify do
  labeled "computes the modifier for 4 to be -3" do
    expected = -3
    actual = modifier 4
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

dndCharacter.modifier.test.ex16 = verify do
  labeled "computes the modifier for 3 to be -4" do
    expected = -4
    actual = modifier 3
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

dndCharacter.ability_.test = verify do
  labeled "generates value within range" do
    Each.repeat 10
    calculatedAbility = !ability_
    label "calculated ability" calculatedAbility
    ensure (Nat.inRange 3 19 calculatedAbility)

dndCharacter.character.test = verify do
  generateErrorMessage attributeName value =
    use Nat toText
    attributeName ++
    " has the wrong value. Generated value: " ++
    toText value
  labeled "generates valid character" do
    Each.repeat 10
    (Character strength dexterity constitution intelligence wisdom charisma hitpoints) = !character
    expectedHitpoints = Int.abs (+10 Int.+ modifier constitution)
    ensureWith (generateErrorMessage "Strength" strength) (Nat.inRange 3 19 strength)
    ensureWith (generateErrorMessage "Dexterity" dexterity) (Nat.inRange 3 19 dexterity)
    ensureWith (generateErrorMessage "Constitution" constitution) (Nat.inRange 3 19 constitution)
    ensureWith (generateErrorMessage "Intelligence" intelligence) (Nat.inRange 3 19 intelligence)
    ensureWith (generateErrorMessage "Wisdom" wisdom) (Nat.inRange 3 19 wisdom)
    ensureWith (generateErrorMessage "Charisma" charisma) (Nat.inRange 3 19 charisma)
    ensureWith (generateErrorMessage "Hitpoints" hitpoints) (hitpoints == expectedHitpoints)

test> dndCharacter.tests =
  [ dndCharacter.ability_.test
  , dndCharacter.character.test
  , dndCharacter.modifier.test.ex1
  , dndCharacter.modifier.test.ex2
  , dndCharacter.modifier.test.ex3
  , dndCharacter.modifier.test.ex4
  , dndCharacter.modifier.test.ex5
  , dndCharacter.modifier.test.ex6
  , dndCharacter.modifier.test.ex7
  , dndCharacter.modifier.test.ex8
  , dndCharacter.modifier.test.ex9
  , dndCharacter.modifier.test.ex10
  , dndCharacter.modifier.test.ex11
  , dndCharacter.modifier.test.ex12
  , dndCharacter.modifier.test.ex13
  , dndCharacter.modifier.test.ex14
  , dndCharacter.modifier.test.ex15
  , dndCharacter.modifier.test.ex16
  ] |> join
