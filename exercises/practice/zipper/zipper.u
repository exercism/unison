structural type zipper.Tree a
  = Branch a (Optional (zipper.Tree a)) (Optional (zipper.Tree a))

structural ability zipper.Zipper t a where
  setValue : a ->{zipper.Zipper t a} ()
  setLeft : t a ->{zipper.Zipper t a} ()
  setRight : t a ->{zipper.Zipper t a} ()
  left : {zipper.Zipper t a} ()
  right : {zipper.Zipper t a} ()
  up : {zipper.Zipper t a} ()
  focus : {zipper.Zipper t a} a

-- Zipper.handlerImpl performs the inner workings of the two following `run` functions.
zipper.Zipper.handlerImpl : Tree a -> Request (Zipper Tree a) r -> (r, Tree a)
zipper.Zipper.handlerImpl binTree =
  todo "implement the handlerImpl core logic"

-- Zipper.run changes the given tree using the zipper ability, returning whatever type the function which performs the Zipper ability returns
zipper.Zipper.run : Tree a -> '{Zipper Tree a} r -> r
zipper.Zipper.run tree zipperFunction =
  todo "implement Zipper.run"

-- Zipper.runWithTree
zipper.Zipper.runWithTree : Tree a -> '{Zipper Tree a} r -> (r, Tree a)
zipper.Zipper.runWithTree tree zipperFunction =
  todo "implement Zipper.runWithTree"

-- Below is an example of how you might use and run your Zipper ability

zipper.testTree : Tree Nat
zipper.testTree = Branch 1 (Some (Branch 2 None None)) (Some (Branch 3 None None))

zipper.changeTree : '{Zipper Tree Nat} Nat
zipper.changeTree _ =
  Zipper.right
  setValue 400
  Zipper.up
  setValue 500
  setLeft testTree
  focus

zipper.exampleProgram : (Nat, Tree Nat)
zipper.exampleProgram = runWithTree testTree changeTree

{-
`exampleProgram` should return a focus of `500` and a tree structure:

```
     500
    /   \
    1   400
  /   \
 2     3
````
-}
