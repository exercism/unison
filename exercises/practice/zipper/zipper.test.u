zipper.test.ex1 = verify do
  labeled "run should not change tree" do
    testTree = Branch 1 (Some (Branch 2 None None)) (Some (Branch 3 None None))
    treeAfterRun = Zipper.runWithTree testTree '(id) |> at2
    ensureEqual treeAfterRun testTree

zipper.test.ex2 = verify do
  labeled "can focus left" do
    expected = 2
    testTree = Branch 1 (Some (Branch expected None None)) (Some (Branch 3 None None))
    nav _ =
     Zipper.left
     Zipper.focus
    actual = Zipper.run testTree nav
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

zipper.test.ex3 = verify do
  labeled "can focus right" do
    expected = 3
    testTree = Branch 1 (Some (Branch 2 None None)) (Some (Branch expected None None))
    nav _ =
      Zipper.right
      Zipper.focus
    actual = Zipper.run testTree nav
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

zipper.test.ex4 = verify do
  labeled "can move twice right" do
    expected = 4
    testTree = Branch 1 (Some (Branch 2 None None)) (Some (Branch 3 None  (Some (Branch expected None None))))
    nav _ =
      Zipper.right
      Zipper.right
      Zipper.focus
    actual = Zipper.run testTree nav
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

zipper.test.ex5 = verify do
  labeled "can move twice left" do
    expected = 4
    testTree = Branch 1 (Some (Branch 3 (Some (Branch expected None None)) None )) (Some (Branch 2 None None))
    nav _ =
      Zipper.left
      Zipper.left
      Zipper.focus
    actual = Zipper.run testTree nav
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

zipper.test.ex6 = verify do
  labeled "can move left and right" do
    expected = 4
    testTree = Branch 1 (Some (Branch 3 None (Some (Branch expected None None)))) (Some (Branch 2 None None))
    nav _ =
      Zipper.left
      Zipper.right
      Zipper.focus
    actual = Zipper.run testTree nav
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

zipper.test.ex7 = verify do
  labeled "can move left, set value, and up" do
    expectedValue = 1
    testTree = Branch expectedValue (Some (Branch 2 None None)) (Some (Branch 3 None None))
    newLeft = 200
    expectedTree = Branch expectedValue (Some (Branch newLeft None None)) (Some (Branch 3 None None))
    nav _ =
      Zipper.left
      Zipper.setValue newLeft
      Zipper.up
      Zipper.focus
    actual = Zipper.runWithTree testTree nav
    ensureEqual (expectedValue, expectedTree) actual

zipper.test.ex8 = verify do
  labeled "can move right, set value, and up" do
    expectedValue = 1
    testTree = Branch expectedValue (Some (Branch 2 None None)) (Some (Branch 3 None None))
    newRight = 300
    expectedTree = Branch expectedValue (Some (Branch 2 None None)) (Some (Branch newRight None None))
    nav _ =
      Zipper.right
      Zipper.setValue newRight
      Zipper.up
      Zipper.focus
    actual = Zipper.runWithTree testTree nav
    ensureEqual (expectedValue, expectedTree) actual

zipper.test.ex9 = verify do
  labeled "can move left, set left tree, and up" do
    expectedValue = 1
    testTree = Branch expectedValue (Some (Branch 2 None None)) (Some (Branch 3 None None))
    newLeft = 200
    expectedTree = Branch expectedValue (Some (Branch 2 (Some testTree) None)) (Some (Branch 3 None None))
    nav _ =
      Zipper.left
      Zipper.setLeft testTree
      Zipper.up
      Zipper.focus
    actual = Zipper.runWithTree testTree nav
    ensureEqual (expectedValue, expectedTree) actual

zipper.test.ex10 = verify do
  labeled "can move right, set right tree, and up" do
    expectedValue = 1
    testTree = Branch expectedValue (Some (Branch 2 None None)) (Some (Branch 3 None None))
    newRight = 300
    expectedTree = Branch expectedValue (Some (Branch 2 None None)) (Some (Branch 3 None (Some testTree)))
    nav _ =
      Zipper.right
      Zipper.setRight testTree
      Zipper.up
      Zipper.focus
    actual = Zipper.runWithTree testTree nav
    ensureEqual (expectedValue, expectedTree) actual

zipper.test.ex11 = verify do
  labeled "returns self when no more rights" do
    expected = 3
    testTree = Branch 1 (Some (Branch 2 None None)) (Some (Branch expected None None))
    nav _ =
      Zipper.right
      Zipper.right
      Zipper.right
      Zipper.focus
    actual = Zipper.run testTree nav
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

zipper.test.ex12 = verify do
  labeled "returns self when no more parents" do
    expected = 1
    testTree = Branch expected (Some (Branch 2 None None)) (Some (Branch 3 None None))
    nav _ =
      Zipper.right
      Zipper.up
      Zipper.up
      Zipper.focus
    actual = Zipper.run testTree nav
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

test> zipper.tests = join [
  zipper.test.ex1,
  zipper.test.ex2,
  zipper.test.ex3,
  zipper.test.ex4,
  zipper.test.ex5,
  zipper.test.ex6,
  zipper.test.ex7,
  zipper.test.ex8,
  zipper.test.ex9,
  zipper.test.ex10,
  zipper.test.ex11,
  zipper.test.ex12
]
