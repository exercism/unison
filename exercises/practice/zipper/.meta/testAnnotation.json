[
  {
    "name": "run should not change tree",
    "test_code": "let\n  testTree = Branch 1 (Some (Branch 2 None None)) (Some (Branch 3 None None))\n  Test.label.deprecated \"run should not change tree\" <| Test.expect ( Zipper.runWithTree testTree '(id) |> at2 === testTree)"
  },
  {
    "name": "can focus left",
    "test_code": "let\n  value = 2\n  testTree = Branch 1 (Some (Branch value None None)) (Some (Branch 3 None None))\n  nav _ =\n    Zipper.left\n    Zipper.focus\n  Test.label.deprecated \"can focus left\" <| Test.expect ( Zipper.run testTree nav  === value)"
  },
  {
    "name": "can focus right",
    "test_code": "let\n  value = 3\n  testTree = Branch 1 (Some (Branch 2 None None)) (Some (Branch value None None))\n  nav _ =\n    Zipper.right\n    Zipper.focus\n  Test.label.deprecated \"can focus right\" <| Test.expect ( Zipper.run testTree nav  === value)"
  },
  {
    "name": "can move twice right",
    "test_code": "let\n  value = 4\n  testTree = Branch 1 (Some (Branch 2 None None)) (Some (Branch 3 None  (Some (Branch value None None))))\n  nav _ =\n    Zipper.right\n    Zipper.right\n    Zipper.focus\n  Test.label.deprecated \"can move twice right\" <| Test.expect ( Zipper.run testTree nav === value)"
  },
  {
    "name": "can move twice left",
    "test_code": "let\n  value = 4\n  testTree = Branch 1 (Some (Branch 3 (Some (Branch value None None)) None )) (Some (Branch 2 None None))\n  nav _ =\n    Zipper.left\n    Zipper.left\n    Zipper.focus\n  Test.label.deprecated \"can move twice left\" <| Test.expect ( Zipper.run testTree nav  === value)"
  },
  {
    "name": "can move left and right",
    "test_code": "let\n  value = 4\n  testTree = Branch 1 (Some (Branch 3 None (Some (Branch value None None)))) (Some (Branch 2 None None))\n  nav _ =\n    Zipper.left\n    Zipper.right\n    Zipper.focus\n  Test.label.deprecated \"can move left and right\" <| Test.expect ( Zipper.run testTree nav  === value)"
  },
  {
    "name": "can move left, set value, and up",
    "test_code": "let\n  value = 1\n  testTree = Branch value (Some (Branch 2 None None)) (Some (Branch 3 None None))\n  newLeft = 200\n  expectedTree = Branch value (Some (Branch newLeft None None)) (Some (Branch 3 None None))\n  nav _ =\n    Zipper.left\n    Zipper.setValue newLeft\n    Zipper.up\n    Zipper.focus\n  Test.label.deprecated \"can move left, set value, and up\" <| Test.expect ( Zipper.runWithTree testTree nav === (value, expectedTree))"
  },
  {
    "name": "can move right, set value, and up",
    "test_code": "let\n  value = 1\n  testTree = Branch value (Some (Branch 2 None None)) (Some (Branch 3 None None))\n  newRight = 300\n  expectedTree = Branch value (Some (Branch 2 None None)) (Some (Branch newRight None None))\n  nav _ =\n    Zipper.right\n    Zipper.setValue newRight\n    Zipper.up\n    Zipper.focus\n  Test.label.deprecated \"can move right, set value, and up\" <| Test.expect ( Zipper.runWithTree testTree nav === (value, expectedTree))"
  },
  {
    "name": "can move left, set left tree, and up",
    "test_code": "let\n  value = 1\n  testTree = Branch value (Some (Branch 2 None None)) (Some (Branch 3 None None))\n  newLeft = 200\n  expectedTree = Branch value (Some (Branch 2 (Some testTree) None)) (Some (Branch 3 None None))\n  nav _ =\n    Zipper.left\n    Zipper.setLeft testTree\n    Zipper.up\n    Zipper.focus\n  Test.label.deprecated \"can move left, set left tree, and up\" <| Test.expect ( Zipper.runWithTree testTree nav === (value, expectedTree))"
  },
  {
    "name": "can move right, set right tree, and up",
    "test_code": "let\n  value = 1\n  testTree = Branch value (Some (Branch 2 None None)) (Some (Branch 3 None None))\n  newRight = 300\n  expectedTree = Branch value (Some (Branch 2 None None)) (Some (Branch 3 None (Some testTree)))\n  nav _ =\n    Zipper.right\n    Zipper.setRight testTree\n    Zipper.up\n    Zipper.focus\n  Test.label.deprecated \"can move right, set right tree, and up\" <| Test.expect ( Zipper.runWithTree testTree nav === (value, expectedTree))"
  },
  {
    "name": "returns self when no more rights",
    "test_code": "let\n  value = 3\n  testTree = Branch 1 (Some (Branch 2 None None)) (Some (Branch value None None))\n  nav _ =\n    Zipper.right\n    Zipper.right\n    Zipper.right\n    Zipper.focus\n  Test.label.deprecated \"returns self when no more rights\" <| Test.expect ( Zipper.run testTree nav === value)"
  },
  {
    "name": "returns self when no more parents",
    "test_code": "let\n  value = 1\n  testTree = Branch value (Some (Branch 2 None None)) (Some (Branch 3 None None))\n  nav _ =\n    Zipper.right\n    Zipper.up\n    Zipper.up\n    Zipper.focus\n  Test.label.deprecated \"returns self when no more parents\" <| Test.expect ( Zipper.run testTree nav === value)"
  }
]