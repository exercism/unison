listOps.append.tests.ex1 =
  Test.expect ([] === (listOps.append [] []))
    |> Test.label.deprecated "append entries to a list and return the new list - empty lists"

listOps.append.tests.ex2 =
  Test.expect ([1, 2, 3, 4] === listOps.append [] [1, 2, 3, 4])
    |> Test.label.deprecated "append entries to a list and return the new list - list to empty list"

listOps.append.tests.ex3 =
  Test.expect ([1, 2, 3, 4] === listOps.append [1, 2, 3, 4] [])
    |> Test.label.deprecated "append entries to a list and return the new list - empty list to list"

listOps.append.tests.ex4 =
  Test.expect ([1, 2, 2, 3, 4, 5] === listOps.append [1, 2] [2, 3, 4, 5])
    |> Test.label.deprecated "append entries to a list and return the new list - non-empty lists"

listOps.concat.tests.ex1 =
  Test.expect ([] === listOps.concat [])
    |> Test.label.deprecated "concatenate a list of lists - empty list"

listOps.concat.tests.ex2 =
  Test.expect ([1, 2, 3, 4, 5, 6] === listOps.concat [[1, 2], [3], [], [4, 5, 6]])
    |> Test.label.deprecated "concatenate a list of lists - list of lists"

listOps.concat.tests.ex3 =
  Test.expect ([[1], [2], [3], [], [4, 5, 6]] === listOps.concat [[[1], [2]], [[3]], [[]], [[4, 5, 6]]])
    |> Test.label.deprecated "concatenate a list of lists - list of nested lists"

listOps.filter.tests.ex1 =
  Test.expect ([] === listOps.filter (x -> 1 == mod x 2) [])
    |> Test.label.deprecated "filter list returning only values that satisfy the filter function - empty list"

listOps.filter.tests.ex2 =
  Test.expect ([1, 3, 5] === listOps.filter (x -> 1 == mod x 2) [1, 2, 3, 5])
    |> Test.label.deprecated "filter list returning only values that satisfy the filter function - non-empty list"

listOps.foldl.tests.ex1 =
  use Nat *
  Test.expect (2 == listOps.foldl (acc el -> el * acc) 2 [])
    |> Test.label.deprecated "folds (reduces) the given list from the left with a function - empty list"

listOps.foldl.tests.ex2 =
  use Nat +
  Test.expect (15 == listOps.foldl (acc el -> el + acc) 5 [1, 2, 3, 4])
    |> Test.label.deprecated "folds (reduces) the given list from the left with a function - direction independent function applied to non-empty list"

listOps.foldl.tests.ex3 =
  use Float /
  Test.expect (64.0 == listOps.foldl (acc el -> el / acc) 24.0 [1.0, 2.0, 3.0, 4.0])
    |> Test.label.deprecated "folds (reduces) the given list from the left with a function - direction dependent function applied to non-empty list"

listOps.foldr.tests.ex1 =
  use Nat *
  Test.expect (2 == listOps.foldr (acc el -> el * acc) 2 [])
    |> Test.label.deprecated "folds (reduces) the given list from the right with a function - empty list"

listOps.foldr.tests.ex2 =
  use Nat +
  Test.expect (15 == listOps.foldr (acc el -> el + acc) 5 [1, 2, 3, 4])
    |> Test.label.deprecated "folds (reduces) the given list from the right with a function - direction independent function applied to non-empty list"

listOps.foldr.tests.ex3 =
  use Float /
  Test.expect (9.0 == listOps.foldr (acc el -> el / acc) 24.0 [1.0, 2.0, 3.0, 4.0])
    |> Test.label.deprecated "folds (reduces) the given list from the right with a function - direction dependent function applied to non-empty list"

listOps.length.tests.ex1 =
  Test.expect (0 == listOps.length [])
    |> Test.label.deprecated "returns the length of a list - empty list"

listOps.length.tests.ex2 =
  Test.expect (4 == listOps.length [1, 2, 3, 4])
    |> Test.label.deprecated "returns the length of a list - non-empty list"

listOps.map.tests.ex1 =
  Test.expect ([] === listOps.map (x -> x + 1) [])
    |> Test.label.deprecated "return a list of elements whose values equal the list value transformed by the mapping function - empty list"

listOps.map.tests.ex2 =
  Test.expect ([2, 4, 6, 8] === listOps.map (x -> x + 1) [1, 3, 5, 7])
    |> Test.label.deprecated "return a list of elements whose values equal the list value transformed by the mapping function - non-empty list"

listOps.reverse.tests.ex1 =
  Test.expect ([] === listOps.reverse [])
    |> Test.label.deprecated "reverse the elements of the list - empty list"

listOps.reverse.tests.ex2 =
  Test.expect ([7, 5, 3, 1] === listOps.reverse [1, 3, 5, 7])
    |> Test.label.deprecated "reverse the elements of the list - non-empty list"

listOps.reverse.tests.ex3 =
  Test.expect ([[4, 5, 6], [], [3], [1, 2]] === listOps.reverse [[1, 2], [3], [], [4, 5, 6]])
    |> Test.label.deprecated "reverse the elements of the list - list of lists is not flattened"

test> listOps.tests = runAll [
  listOps.append.tests.ex1,
  listOps.append.tests.ex2,
  listOps.append.tests.ex3,
  listOps.append.tests.ex4,
  listOps.concat.tests.ex1,
  listOps.concat.tests.ex2,
  listOps.concat.tests.ex3,
  listOps.filter.tests.ex1,
  listOps.filter.tests.ex2,
  listOps.foldl.tests.ex1,
  listOps.foldl.tests.ex2,
  listOps.foldl.tests.ex3,
  listOps.foldr.tests.ex1,
  listOps.foldr.tests.ex2,
  listOps.foldr.tests.ex3,
  listOps.length.tests.ex1,
  listOps.length.tests.ex2,
  listOps.map.tests.ex1,
  listOps.map.tests.ex2,
  listOps.reverse.tests.ex1,
  listOps.reverse.tests.ex2,
  listOps.reverse.tests.ex3
]
