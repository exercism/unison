listOps.append.tests.ex1 = verify do
  labeled "append entries to a list and return the new list - empty lists" do
    expected = []
    actual = listOps.append [] []
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.append.tests.ex2 = verify do
  labeled "append entries to a list and return the new list - list to empty list" do
    expected = [1, 2, 3, 4]
    actual = listOps.append [] [1, 2, 3, 4]
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.append.tests.ex3 = verify do
  labeled "append entries to a list and return the new list - empty list to list" do
    expected = [1, 2, 3, 4]
    actual = listOps.append [1, 2, 3, 4] []
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.append.tests.ex4 = verify do
  labeled "append entries to a list and return the new list - non-empty lists" do
    expected = [1, 2, 2, 3, 4, 5]
    actual = listOps.append [1, 2] [2, 3, 4, 5]
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.concat.tests.ex1 = verify do
  labeled "concatenate a list of lists - empty list" do
    expected = []
    actual = listOps.concat []
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.concat.tests.ex2 = verify do
  labeled "concatenate a list of lists - list of lists" do
    expected = [1, 2, 3, 4, 5, 6]
    actual = listOps.concat [[1, 2], [3], [], [4, 5, 6]]
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.concat.tests.ex3 = verify do
  labeled "concatenate a list of lists - list of nested lists" do
    expected = [[1], [2], [3], [], [4, 5, 6]]
    actual = listOps.concat [[[1], [2]], [[3]], [[]], [[4, 5, 6]]]
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.filter.tests.ex1 = verify do
  labeled "filter list returning only values that satisfy the filter function - empty list" do
    expected = []
    actual = listOps.filter (x -> 1 == mod x 2) []
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.filter.tests.ex2 = verify do
  labeled "filter list returning only values that satisfy the filter function - non-empty list" do
    expected = [1, 3, 5]
    actual = listOps.filter (x -> 1 == mod x 2) [1, 2, 3, 5]
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.foldl.tests.ex1 = verify do
  use Nat *
  labeled "folds (reduces) the given list from the left with a function - empty list" do
    expected = 2
    actual = listOps.foldl (acc el -> el * acc) 2 []
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.foldl.tests.ex2 = verify do
  use Nat +
  labeled "folds (reduces) the given list from the left with a function - direction independent function applied to non-empty list" do
    expected = 15
    actual = listOps.foldl (acc el -> el + acc) 5 [1, 2, 3, 4]
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.foldl.tests.ex3 = verify do
  use Float /
  labeled "folds (reduces) the given list from the left with a function - direction dependent function applied to non-empty list" do
    expected = 64.0
    actual = listOps.foldl (acc el -> el / acc) 24.0 [1.0, 2.0, 3.0, 4.0]
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.foldr.tests.ex1 = verify do
  use Nat *
  labeled "folds (reduces) the given list from the right with a function - empty list" do
    expected = 2
    actual = listOps.foldr (acc el -> el * acc) 2 []
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.foldr.tests.ex2 = verify do
  use Nat +
  labeled "folds (reduces) the given list from the right with a function - direction independent function applied to non-empty list" do
    expected = 15
    actual = listOps.foldr (acc el -> el + acc) 5 [1, 2, 3, 4]
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.foldr.tests.ex3 = verify do
  use Float /
  labeled "folds (reduces) the given list from the right with a function - direction dependent function applied to non-empty list" do
    expected = 9.0
    actual = listOps.foldr (acc el -> el / acc) 24.0 [1.0, 2.0, 3.0, 4.0]
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.length.tests.ex1 = verify do
  labeled "returns the length of a list - empty list" do
    expected = 0
    actual = listOps.length []
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.length.tests.ex2 = verify do
  labeled "returns the length of a list - non-empty list" do
    expected = 4
    actual = listOps.length [1, 2, 3, 4]
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.map.tests.ex1 = verify do
  labeled "return a list of elements whose values equal the list value transformed by the mapping function - empty list" do
    expected = []
    actual = listOps.map (x -> x + 1) []
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.map.tests.ex2 = verify do
  labeled "return a list of elements whose values equal the list value transformed by the mapping function - non-empty list" do
    expected = [2, 4, 6, 8]
    actual = listOps.map (x -> x + 1) [1, 3, 5, 7]
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.reverse.tests.ex1 = verify do
  labeled "reverse the elements of the list - empty list" do
    expected = []
    actual = listOps.reverse []
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.reverse.tests.ex2 = verify do
  labeled "reverse the elements of the list - non-empty list" do
    expected = [7, 5, 3, 1]
    actual = listOps.reverse [1, 3, 5, 7]
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual

listOps.reverse.tests.ex3 = verify do
  labeled "reverse the elements of the list - list of lists is not flattened" do
    expected = [[4, 5, 6], [], [3], [1, 2]]
    actual = listOps.reverse [[1, 2], [3], [], [4, 5, 6]]
    label "expected" expected
    label "actual" actual
    ensureEqual expected actual


test> listOps.tests = join [
  listOps.append.tests.ex1,
  listOps.append.tests.ex2,
  listOps.append.tests.ex3,
  listOps.append.tests.ex4,
  listOps.concat.tests.ex1,
  listOps.concat.tests.ex2,
  listOps.concat.tests.ex3,
  listOps.filter.tests.ex1,
  listOps.filter.tests.ex2,
  listOps.foldl.tests.ex1,
  listOps.foldl.tests.ex2,
  listOps.foldl.tests.ex3,
  listOps.foldr.tests.ex1,
  listOps.foldr.tests.ex2,
  listOps.foldr.tests.ex3,
  listOps.length.tests.ex1,
  listOps.length.tests.ex2,
  listOps.map.tests.ex1,
  listOps.map.tests.ex2,
  listOps.reverse.tests.ex1,
  listOps.reverse.tests.ex2,
  listOps.reverse.tests.ex3
]
