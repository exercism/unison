[
  {
    "name": "append entries to a list and return the new list - empty lists",
    "test_code": "verify do\n  labeled \"append entries to a list and return the new list - empty lists\" do\n    expected = []\n    actual = listOps.append [] []\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "append entries to a list and return the new list - list to empty list",
    "test_code": "verify do\n  labeled \"append entries to a list and return the new list - list to empty list\" do\n    expected = [1, 2, 3, 4]\n    actual = listOps.append [] [1, 2, 3, 4]\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "append entries to a list and return the new list - empty list to list",
    "test_code": "verify do\n  labeled \"append entries to a list and return the new list - empty list to list\" do\n    expected = [1, 2, 3, 4]\n    actual = listOps.append [1, 2, 3, 4] []\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "append entries to a list and return the new list - non-empty lists",
    "test_code": "verify do\n  labeled \"append entries to a list and return the new list - non-empty lists\" do\n    expected = [1, 2, 2, 3, 4, 5]\n    actual = listOps.append [1, 2] [2, 3, 4, 5]\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "concatenate a list of lists - empty list",
    "test_code": "verify do\n  labeled \"concatenate a list of lists - empty list\" do\n    expected = []\n    actual = listOps.concat []\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "concatenate a list of lists - list of lists",
    "test_code": "verify do\n  labeled \"concatenate a list of lists - list of lists\" do\n    expected = [1, 2, 3, 4, 5, 6]\n    actual = listOps.concat [[1, 2], [3], [], [4, 5, 6]]\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "concatenate a list of lists - list of nested lists",
    "test_code": "verify do\n  labeled \"concatenate a list of lists - list of nested lists\" do\n    expected = [[1], [2], [3], [], [4, 5, 6]]\n    actual = listOps.concat [[[1], [2]], [[3]], [[]], [[4, 5, 6]]]\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "filter list returning only values that satisfy the filter function - empty list",
    "test_code": "verify do\n  labeled \"filter list returning only values that satisfy the filter function - empty list\" do\n    expected = []\n    actual = listOps.filter (x -> 1 == mod x 2) []\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "filter list returning only values that satisfy the filter function - non-empty list",
    "test_code": "verify do\n  labeled \"filter list returning only values that satisfy the filter function - non-empty list\" do\n    expected = [1, 3, 5]\n    actual = listOps.filter (x -> 1 == mod x 2) [1, 2, 3, 5]\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "folds (reduces) the given list from the left with a function - empty list",
    "test_code": "verify do\n  use Nat *\n  labeled \"folds (reduces) the given list from the left with a function - empty list\" do\n    expected = 2\n    actual = listOps.foldl (acc el -> el * acc) 2 []\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "folds (reduces) the given list from the left with a function - direction independent function applied to non-empty list",
    "test_code": "verify do\n  use Nat +\n  labeled \"folds (reduces) the given list from the left with a function - direction independent function applied to non-empty list\" do\n    expected = 15\n    actual = listOps.foldl (acc el -> el + acc) 5 [1, 2, 3, 4]\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "folds (reduces) the given list from the left with a function - direction dependent function applied to non-empty list",
    "test_code": "verify do\n  use Float /\n  labeled \"folds (reduces) the given list from the left with a function - direction dependent function applied to non-empty list\" do\n    expected = 64.0\n    actual = listOps.foldl (acc el -> el / acc) 24.0 [1.0, 2.0, 3.0, 4.0]\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "folds (reduces) the given list from the right with a function - empty list",
    "test_code": "verify do\n  use Nat *\n  labeled \"folds (reduces) the given list from the right with a function - empty list\" do\n    expected = 2\n    actual = listOps.foldr (acc el -> el * acc) 2 []\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "folds (reduces) the given list from the right with a function - direction independent function applied to non-empty list",
    "test_code": "verify do\n  use Nat +\n  labeled \"folds (reduces) the given list from the right with a function - direction independent function applied to non-empty list\" do\n    expected = 15\n    actual = listOps.foldr (acc el -> el + acc) 5 [1, 2, 3, 4]\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "folds (reduces) the given list from the right with a function - direction dependent function applied to non-empty list",
    "test_code": "verify do\n  use Float /\n  labeled \"folds (reduces) the given list from the right with a function - direction dependent function applied to non-empty list\" do\n    expected = 9.0\n    actual = listOps.foldr (acc el -> el / acc) 24.0 [1.0, 2.0, 3.0, 4.0]\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "returns the length of a list - empty list",
    "test_code": "verify do\n  labeled \"returns the length of a list - empty list\" do\n    expected = 0\n    actual = listOps.length []\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "returns the length of a list - non-empty list",
    "test_code": "verify do\n  labeled \"returns the length of a list - non-empty list\" do\n    expected = 4\n    actual = listOps.length [1, 2, 3, 4]\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "return a list of elements whose values equal the list value transformed by the mapping function - empty list",
    "test_code": "verify do\n  labeled \"return a list of elements whose values equal the list value transformed by the mapping function - empty list\" do\n    expected = []\n    actual = listOps.map (x -> x + 1) []\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "return a list of elements whose values equal the list value transformed by the mapping function - non-empty list",
    "test_code": "verify do\n  labeled \"return a list of elements whose values equal the list value transformed by the mapping function - non-empty list\" do\n    expected = [2, 4, 6, 8]\n    actual = listOps.map (x -> x + 1) [1, 3, 5, 7]\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "reverse the elements of the list - empty list",
    "test_code": "verify do\n  labeled \"reverse the elements of the list - empty list\" do\n    expected = []\n    actual = listOps.reverse []\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "reverse the elements of the list - non-empty list",
    "test_code": "verify do\n  labeled \"reverse the elements of the list - non-empty list\" do\n    expected = [7, 5, 3, 1]\n    actual = listOps.reverse [1, 3, 5, 7]\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "reverse the elements of the list - list of lists is not flattened",
    "test_code": "verify do\n  labeled \"reverse the elements of the list - list of lists is not flattened\" do\n    expected = [[4, 5, 6], [], [3], [1, 2]]\n    actual = listOps.reverse [[1, 2], [3], [], [4, 5, 6]]\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  }
]
