[
  {
    "name": "queen with a valid position",
    "test_code": "verify do\n  labeled \"queen with a valid position\" do\n    expected = Some (2,2)\n    actual = toOptional! '(create (2,2))\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "queen must have row on board",
    "test_code": "verify do\n  labeled \"queen must have row on board\" do\n    expected = None\n    actual = toOptional! '(create (8,4))\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "queen must have column on board",
    "test_code": "verify do\n  labeled \"queen must have column on board\" do\n    expected = None\n    actual = toOptional! '(create (4,8))\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "cannot attack",
    "test_code": "verify do\n  labeled \"cannot attack\" do\n    expected = Some false\n    actual = toOptional! '(canAttack (2,4) (6,6))\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "can attack on same row",
    "test_code": "verify do\n  labeled \"can attack on same row\" do\n    expected = Some true\n    actual = toOptional! '(canAttack (2,4) (2,6))\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "can attack on same column",
    "test_code": "verify do\n  labeled \"can attack on same column\" do\n    expected = Some true\n    actual = toOptional! '(canAttack (4,5) (2,5))\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "can attack on first diagonal",
    "test_code": "verify do\n  labeled \"can attack on first diagonal\" do\n    expected = Some true\n    actual = toOptional! '(canAttack (2,2) (0,4))\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "can attack on second diagonal",
    "test_code": "verify do\n  labeled \"can attack on second diagonal\" do\n    expected = Some true\n    actual = toOptional! '(canAttack (2,2) (3,1))\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "can attack on third diagonal",
    "test_code": "verify do\n  labeled \"can attack on third diagonal\" do\n    expected = Some true\n    actual = toOptional! '(canAttack (2,2) (1,1))\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "can attack on fourth diagonal",
    "test_code": "verify do\n  labeled \"can attack on fourth diagonal\" do\n    expected = Some true\n    actual = toOptional! '(canAttack (1,7) (0,6))\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "cannot attack if falling diagonals are only the same when reflected across the longest falling diagonal",
    "test_code": "verify do\n  labeled \"cannot attack if falling diagonals are only the same when reflected across the longest falling diagonal\" do\n    expected = Some false\n    actual = toOptional! '(canAttack (4,1) (2,5))\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  }
]
