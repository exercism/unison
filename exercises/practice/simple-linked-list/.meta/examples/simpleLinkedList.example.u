structural type LinkedList a = Nil | Cons a (LinkedList a)

LinkedList.new : a -> LinkedList a
LinkedList.new a = Cons a Nil

LinkedList.cons : a -> LinkedList a -> LinkedList a
LinkedList.cons a ls = Cons a ls

LinkedList.nil : LinkedList a
LinkedList.nil = Nil

LinkedList.fromList : [a] -> LinkedList a
LinkedList.fromList xs = List.foldRight (a acc -> Cons a acc) LinkedList.Nil xs

LinkedList.head : LinkedList a -> Optional a
LinkedList.head linkedList = match linkedList with
  LinkedList.Nil -> None
  LinkedList.Cons a _ -> Some a

LinkedList.isNil : LinkedList a -> Boolean
LinkedList.isNil linkedList = match linkedList with
  Nil -> true
  _ -> false

LinkedList.tail : LinkedList a -> LinkedList a
LinkedList.tail linkedList = match linkedList with
  LinkedList.Cons a t -> t
  LinkedList.Nil -> Nil

LinkedList.reverseLinkedList : LinkedList a -> LinkedList a
LinkedList.reverseLinkedList linkedList =
  go acc = cases
    LinkedList.Nil -> acc
    LinkedList.Cons a rest -> go (Cons a acc) rest
  go Nil linkedList

LinkedList.toList : LinkedList a -> [a]
LinkedList.toList linkedList = match linkedList with
  LinkedList.Nil -> List.empty
  LinkedList.Cons a remaining -> a +: (toList remaining)
