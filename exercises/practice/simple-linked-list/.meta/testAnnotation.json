[
  {
    "name": "isNil should return appropriate boolean",
    "test_code": "verify do\n  labeled \"isNil should return appropriate boolean\" do\n    expected = true\n    nilTest = isNil nil\n    notNilTest = isNil (new 1)\n    actual = nilTest && (not notNilTest)\n    label \"isNil applied to nil\" nilTest\n    label \"isNil applied to not nil\" notNilTest\n    ensureEqual expected actual"
  },
  {
    "name": "calling cons with nil is the same as calling new",
    "test_code": "verify do\n  labeled \"calling cons with nil is the same as calling new\" do\n    expected = new 1\n    actual = cons 1 nil\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "toList and fromList should be symmetrical",
    "test_code": "verify do\n  labeled \"toList and fromList should be symmetrical\" do\n    Each.repeat 10\n    expected = listOf nat (do natIn 1 10)\n    actual = fromList expected |> toList\n    label \"expected\" expected\n    label \"actual\" actual\n    ensureEqual expected actual"
  },
  {
    "name": "head should return optional element",
    "test_code": "verify do\n  labeled \"head should return optional element\" do\n    consTest = head (new 1) === Some 1\n    nilTest = head nil === None\n    label \"head applied to nil\" nilTest\n    label \"head applied to not nil\" consTest\n    ensureEqual true (consTest && nilTest)"
  },
  {
    "name": "tail should drop the first element",
    "test_code": "verify do\n  labeled \"tail should drop the first element\" do\n    l1 = new 1\n    l2 = cons 2 l1\n    manyTest = tail l2 === l1\n    consTest = tail l1 === nil\n    label \"tail applied to the list with 2 and 1\" manyTest\n    label \"tail applied to the list with one entry\" consTest\n    ensureEqual true (manyTest && consTest)"
  },
  {
    "name": "reversing a list twice should be original list",
    "test_code": "verify do\n  labeled \"reversing a list twice should be original list\" do\n    Each.repeat 10\n    listNats = listOf nat (do natIn 1 10)\n    linkedList = fromList listNats\n    reversedTwiceLinkedList = reverseLinkedList linkedList |> reverseLinkedList\n    label \"original linked list\" (toList linkedList)\n    label \"reversed twice linked list\" (toList reversedTwiceLinkedList)\n    ensure (linkedList === reversedTwiceLinkedList)"
  }
]
