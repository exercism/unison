[
  {
    "name": "isNil applied to nil should be true",
    "test_code": "Test.label.deprecated \"isNil applied to nil should be true\" <| expect (isNil nil && (not (isNil (new 1))))"
  },
  {
    "name": "calling cons with nil is the same as calling new",
    "test_code": "Test.label.deprecated \"calling cons with nil is the same as calling new\" <| expect (cons 1 nil === new 1)"
  },
  {
    "name": "toList and fromList should be symmetrical",
    "test_code": "use test.deprecated.gen listOf nat\n  listNats = !(listOf nat)\n  linkedList = fromList listNats\n  Test.label.deprecated \"toList and fromList should be symmetrical\" <| expect (toList linkedList === listNats)"
  },
  {
    "name": "head should return optional element",
    "test_code": "consTest = head (new 1) === Some 1\n  nilTest = head nil === None\n  Test.label.deprecated \"head should return optional element\" <| expect (consTest && nilTest)"
  },
  {
    "name": "tail should drop the first element",
    "test_code": "l1 = new 1\n  l2 = cons 2 l1\n  manyTest = tail l2 === l1\n  consTest = tail l1 === nil\n  nilTest = head nil === None\n  Test.label.deprecated \"tail should drop the first element\" <| expect (consTest && nilTest && manyTest)"
  },
  {
    "name": "reversing a list twice should be original list",
    "test_code": "use test.deprecated.gen listOf nat\n  listNats = !(listOf nat)\n  linkedList = fromList listNats\n  Test.label.deprecated \"reversing a list twice should be original list\" <| expect (reverseLinkedList linkedList |> reverseLinkedList === linkedList)"
  },
  {
    "name": "isNil should return appropriate boolean",
    "test_code": "nilTest = isNil nil\n  consTest = not <| isNil (new 1)\n  Test.label.deprecated \"isNil should return appropriate boolean\" <| expect (nilTest && consTest)"
  }
]