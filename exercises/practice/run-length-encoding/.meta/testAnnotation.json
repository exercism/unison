[
  {
    "name": "run-length encode a string, empty string",
    "test_code": "let\n  Test.label.deprecated \"run-length encode a string, empty string\" <| Test.expect ((encode \"\") === \"\")"
  },
  {
    "name": "run-length encode a string, single characters only are encoded without count",
    "test_code": "let\n  Test.label.deprecated \"run-length encode a string, single characters only are encoded without count\" <| Test.expect (encode \"XYZ\" === \"XYZ\")"
  },
  {
    "name": "run-length encode a string, string with no single characters",
    "test_code": "let\n  Test.label.deprecated \"run-length encode a string, string with no single characters\" <| Test.expect (encode \"AABBBCCCC\" === \"2A3B4C\")"
  },
  {
    "name": "run-length encode a string, single characters mixed with repeated characters",
    "test_code": "let\n  Test.label.deprecated \"run-length encode a string, single characters mixed with repeated characters\" <| Test.expect (encode \"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB\" === \"12WB12W3B24WB\")"
  },
  {
    "name": "run-length encode a string, multiple whitespace mixed in string",
    "test_code": "let\n  Test.label.deprecated \"run-length encode a string, multiple whitespace mixed in string\" <| Test.expect (encode \"  hsqq qww  \" === \"2 hs2q q2w2 \")"
  },
  {
    "name": "run-length encode a string, lowercase characters",
    "test_code": "let\n  Test.label.deprecated \"run-length encode a string, lowercase characters\" <| Test.expect (encode \"aabbbcccc\" === \"2a3b4c\")"
  },
  {
    "name": "run-length decode a string, empty string",
    "test_code": "let\n  Test.label.deprecated \"run-length decode a string, empty string\" <| Test.expect (decode \"\" === \"\")"
  },
  {
    "name": "run-length decode a string, single characters only",
    "test_code": "let\n  Test.label.deprecated \"run-length decode a string, single characters only\" <| Test.expect (decode \"XYZ\" === \"XYZ\")"
  },
  {
    "name": "run-length decode a string, string with no single characters",
    "test_code": "let\n  Test.label.deprecated \"run-length decode a string, string with no single characters\" <| Test.expect (decode \"2A3B4C\" === \"AABBBCCCC\")"
  },
  {
    "name": "run-length decode a string, single characters with repeated characters",
    "test_code": "let\n  Test.label.deprecated \"run-length decode a string, single characters with repeated characters\" <| Test.expect (decode \"12WB12W3B24WB\" === \"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB\")"
  },
  {
    "name": "run-length decode a string, multiple whitespace mixed in string",
    "test_code": "let\n  Test.label.deprecated \"run-length decode a string, multiple whitespace mixed in string\" <| Test.expect (decode \"2 hs2q q2w2 \" === \"  hsqq qww  \")"
  },
  {
    "name": "run-length decode a string, lowercase string",
    "test_code": "let\n  Test.label.deprecated \"run-length decode a string, lowercase string\" <| Test.expect (decode \"2a3b4c\" === \"aabbbcccc\")"
  },
  {
    "name": "encode and then decode, encode followed by decode gives original string",
    "test_code": "let\n  Test.label.deprecated \"encode and then decode, encode followed by decode gives original string\" <| Test.expect (consistency \"zzz ZZ  zZ\" === \"zzz ZZ  zZ\")"
  }
]