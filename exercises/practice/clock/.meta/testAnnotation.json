[
  {
    "name": "Create a new clock with an initial time, on the hour",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, on the hour\" <| Test.expect (create +8 +0 === \"08:00\")"
  },
  {
    "name": "Create a new clock with an initial time, past the hour",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, past the hour\" <| Test.expect (create +11 +9 === \"11:09\")"
  },
  {
    "name": "Create a new clock with an initial time, midnight is zero hours",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, midnight is zero hours\" <| Test.expect (create +24 +0 === \"00:00\")"
  },
  {
    "name": "Create a new clock with an initial time, hour rolls over",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, hour rolls over\" <| Test.expect (create +25 +0 === \"01:00\")"
  },
  {
    "name": "Create a new clock with an initial time, hour rolls over continuously",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, hour rolls over continuously\" <| Test.expect (create +100 +0 === \"04:00\")"
  },
  {
    "name": "Create a new clock with an initial time, sixty minutes is next hour",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, sixty minutes is next hour\" <| Test.expect (create +1 +60 === \"02:00\")"
  },
  {
    "name": "Create a new clock with an initial time, minutes roll over",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, minutes roll over\" <| Test.expect (create +0 +160 === \"02:40\")"
  },
  {
    "name": "Create a new clock with an initial time, minutes roll over continuously",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, minutes roll over continuously\" <| Test.expect (create +0 +1723 === \"04:43\")"
  },
  {
    "name": "Create a new clock with an initial time, hour and minutes roll over",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, hour and minutes roll over\" <| Test.expect (create +25 +160 === \"03:40\")"
  },
  {
    "name": "Create a new clock with an initial time, hour and minutes roll over continuously",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, hour and minutes roll over continuously\" <| Test.expect (create +201 +3001 === \"11:01\")"
  },
  {
    "name": "Create a new clock with an initial time, hour and minutes roll over to exactly midnight",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, hour and minutes roll over to exactly midnight\" <| Test.expect (create +72 +8640 === \"00:00\")"
  },
  {
    "name": "Create a new clock with an initial time, negative hour",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, negative hour\" <| Test.expect (create -1 +15 === \"23:15\")"
  },
  {
    "name": "Create a new clock with an initial time, negative hour rolls over",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, negative hour rolls over\" <| Test.expect (create -25 +0 === \"23:00\")"
  },
  {
    "name": "Create a new clock with an initial time, negative hour rolls over continuously",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, negative hour rolls over continuously\" <| Test.expect (create -91 +0 === \"05:00\")"
  },
  {
    "name": "Create a new clock with an initial time, negative minutes",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, negative minutes\" <| Test.expect (create +1 -40 === \"00:20\")"
  },
  {
    "name": "Create a new clock with an initial time, negative minutes roll over",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, negative minutes roll over\" <| Test.expect (create +1 -160 === \"22:20\")"
  },
  {
    "name": "Create a new clock with an initial time, negative minutes roll over continuously",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, negative minutes roll over continuously\" <| Test.expect (create +1 -4820 === \"16:40\")"
  },
  {
    "name": "Create a new clock with an initial time, negative sixty minutes is previous hour",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, negative sixty minutes is previous hour\" <| Test.expect (create +2 -60 === \"01:00\")"
  },
  {
    "name": "Create a new clock with an initial time, negative hour and minutes both roll over",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, negative hour and minutes both roll over\" <| Test.expect (create -25 -160 === \"20:20\")"
  },
  {
    "name": "Create a new clock with an initial time, negative hour and minutes both roll over continuously",
    "test_code": "let\n  Test.label.deprecated \"Create a new clock with an initial time, negative hour and minutes both roll over continuously\" <| Test.expect (create -121 -5810 === \"22:10\")"
  },
  {
    "name": "Add minutes, add minutes",
    "test_code": "let\n  Test.label.deprecated \"Add minutes, add minutes\" <| Test.expect (add +10 +0 +3 === \"10:03\")"
  },
  {
    "name": "Add minutes, add no minutes",
    "test_code": "let\n  Test.label.deprecated \"Add minutes, add no minutes\" <| Test.expect (add +6 +41 +0 === \"06:41\")"
  },
  {
    "name": "Add minutes, add to next hour",
    "test_code": "let\n  Test.label.deprecated \"Add minutes, add to next hour\" <| Test.expect (add +0 +45 +40 === \"01:25\")"
  },
  {
    "name": "Add minutes, add more than one hour",
    "test_code": "let\n  Test.label.deprecated \"Add minutes, add more than one hour\" <| Test.expect (add +10 +0 +61 === \"11:01\")"
  },
  {
    "name": "Add minutes, add more than two hours with carry",
    "test_code": "let\n  Test.label.deprecated \"Add minutes, add more than two hours with carry\" <| Test.expect (add +0 +45 +160 === \"03:25\")"
  },
  {
    "name": "Add minutes, add across midnight",
    "test_code": "let\n  Test.label.deprecated \"Add minutes, add across midnight\" <| Test.expect (add +23 +59 +2 === \"00:01\")"
  },
  {
    "name": "Add minutes, add more than one day (1500 min = 25 hrs)",
    "test_code": "let\n  Test.label.deprecated \"Add minutes, add more than one day (1500 min = 25 hrs)\" <| Test.expect (add +5 +32 +1500 === \"06:32\")"
  },
  {
    "name": "Add minutes, add more than two days",
    "test_code": "let\n  Test.label.deprecated \"Add minutes, add more than two days\" <| Test.expect (add +1 +1 +3500 === \"11:21\")"
  },
  {
    "name": "Subtract minutes, subtract minutes",
    "test_code": "let\n  Test.label.deprecated \"Subtract minutes, subtract minutes\" <| Test.expect (subtract +10 +3 +3 === \"10:00\")"
  },
  {
    "name": "Subtract minutes, subtract to previous hour",
    "test_code": "let\n  Test.label.deprecated \"Subtract minutes, subtract to previous hour\" <| Test.expect (subtract +10 +3 +30 === \"09:33\")"
  },
  {
    "name": "Subtract minutes, subtract more than an hour",
    "test_code": "let\n  Test.label.deprecated \"Subtract minutes, subtract more than an hour\" <| Test.expect (subtract +10 +3 +70 === \"08:53\")"
  },
  {
    "name": "Subtract minutes, subtract across midnight",
    "test_code": "let\n  Test.label.deprecated \"Subtract minutes, subtract across midnight\" <| Test.expect (subtract +0 +3 +4 === \"23:59\")"
  },
  {
    "name": "Subtract minutes, subtract more than two hours",
    "test_code": "let\n  Test.label.deprecated \"Subtract minutes, subtract more than two hours\" <| Test.expect (subtract +0 +0 +160 === \"21:20\")"
  },
  {
    "name": "Subtract minutes, subtract more than two hours with borrow",
    "test_code": "let\n  Test.label.deprecated \"Subtract minutes, subtract more than two hours with borrow\" <| Test.expect (subtract +6 +15 +160 === \"03:35\")"
  },
  {
    "name": "Subtract minutes, subtract more than one day (1500 min = 25 hrs)",
    "test_code": "let\n  Test.label.deprecated \"Subtract minutes, subtract more than one day (1500 min = 25 hrs)\" <| Test.expect (subtract +5 +32 +1500 === \"04:32\")"
  },
  {
    "name": "Subtract minutes, subtract more than two days",
    "test_code": "let\n  Test.label.deprecated \"Subtract minutes, subtract more than two days\" <| Test.expect (subtract +2 +20 +3000 === \"00:20\")"
  },
  {
    "name": "Compare two clocks for equality, clocks with same time",
    "test_code": "let\n  Test.label.deprecated \"Compare two clocks for equality, clocks with same time\" <| Test.expect (equal (+15, +37) (+15, +37) === true)"
  },
  {
    "name": "Compare two clocks for equality, clocks a minute apart",
    "test_code": "let\n  Test.label.deprecated \"Compare two clocks for equality, clocks a minute apart\" <| Test.expect (equal (+15, +36) (+15, +37) === false)"
  },
  {
    "name": "Compare two clocks for equality, clocks an hour apart",
    "test_code": "let\n  Test.label.deprecated \"Compare two clocks for equality, clocks an hour apart\" <| Test.expect (equal (+14, +37) (+15, +37) === false)"
  },
  {
    "name": "Compare two clocks for equality, clocks with hour overflow",
    "test_code": "let\n  Test.label.deprecated \"Compare two clocks for equality, clocks with hour overflow\" <| Test.expect (equal (+10, +37) (+34, +37) === true)"
  },
  {
    "name": "Compare two clocks for equality, clocks with hour overflow by several days",
    "test_code": "let\n  Test.label.deprecated \"Compare two clocks for equality, clocks with hour overflow by several days\" <| Test.expect (equal (+3, +11) (+99, +11) === true)"
  },
  {
    "name": "Compare two clocks for equality, clocks with negative hour",
    "test_code": "let\n  Test.label.deprecated \"Compare two clocks for equality, clocks with negative hour\" <| Test.expect (equal (+22, +40) (-2, +40) === true)"
  },
  {
    "name": "Compare two clocks for equality, clocks with negative hour that wraps",
    "test_code": "let\n  Test.label.deprecated \"Compare two clocks for equality, clocks with negative hour that wraps\" <| Test.expect (equal (+17, +3) (-31, +3) === true)"
  },
  {
    "name": "Compare two clocks for equality, clocks with negative hour that wraps multiple times",
    "test_code": "let\n  Test.label.deprecated \"Compare two clocks for equality, clocks with negative hour that wraps multiple times\" <| Test.expect (equal (+13, +49) (-83, +49) === true)"
  },
  {
    "name": "Compare two clocks for equality, clocks with minute overflow",
    "test_code": "let\n  Test.label.deprecated \"Compare two clocks for equality, clocks with minute overflow\" <| Test.expect (equal (+0, +1) (+0, +1441) === true)"
  },
  {
    "name": "Compare two clocks for equality, clocks with minute overflow by several days",
    "test_code": "let\n  Test.label.deprecated \"Compare two clocks for equality, clocks with minute overflow by several days\" <| Test.expect (equal (+2, +2) (+2, +4322) === true)"
  },
  {
    "name": "Compare two clocks for equality, clocks with negative minute",
    "test_code": "let\n  Test.label.deprecated \"Compare two clocks for equality, clocks with negative minute\" <| Test.expect (equal (+2, +40) (+3, -20) === true)"
  },
  {
    "name": "Compare two clocks for equality, clocks with negative minute that wraps",
    "test_code": "let\n  Test.label.deprecated \"Compare two clocks for equality, clocks with negative minute that wraps\" <| Test.expect (equal (+4, +10) (+5, -1490) === true)"
  },
  {
    "name": "Compare two clocks for equality, clocks with negative minute that wraps multiple times",
    "test_code": "let\n  Test.label.deprecated \"Compare two clocks for equality, clocks with negative minute that wraps multiple times\" <| Test.expect (equal (+6, +15) (+6, -4305) === true)"
  },
  {
    "name": "Compare two clocks for equality, clocks with negative hours and minutes",
    "test_code": "let\n  Test.label.deprecated \"Compare two clocks for equality, clocks with negative hours and minutes\" <| Test.expect (equal (+7, +32) (-12, -268) === true)"
  },
  {
    "name": "Compare two clocks for equality, clocks with negative hours and minutes that wrap",
    "test_code": "let\n  Test.label.deprecated \"Compare two clocks for equality, clocks with negative hours and minutes that wrap\" <| Test.expect (equal (+18, +7) (-54, -11513) === true)"
  },
  {
    "name": "Compare two clocks for equality, full clock and zeroed clock",
    "test_code": "let\n  Test.label.deprecated \"Compare two clocks for equality, full clock and zeroed clock\" <| Test.expect (equal (+24, +0) (+0, +0) === true)"
  }
]