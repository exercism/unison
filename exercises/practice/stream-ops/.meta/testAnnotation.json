[
  {
    "name": "to and from list",
    "test_code": "let\n  expected = [1,2,3]\n  go =\n    s = MyStream.fromList expected\n    !(MyStream.toList s)\n  Test.label.deprecated \"to and from list\" <| Test.expect (go === expected )"
  },
  {
    "name": "to and from list with empty list",
    "test_code": "let\n  go =\n    s = MyStream.fromList List.empty\n    !(MyStream.toList s)\n  Test.label.deprecated \"to and from list with empty list\" <| Test.expect (go === List.empty )"
  },
  {
    "name": "toListWithResult returns list and result",
    "test_code": "let\n  expected = [1,2,3]\n  go = 'let\n    List.map (a -> let\n      MyStream.emit a\n      a\n    ) expected\n  Test.label.deprecated \"toListWithResult returns list and result\" <| Test.expect (!(MyStream.toListWithResult go) === (expected, expected))"
  },
  {
    "name": "ignore returns only the result, not the materialized stream",
    "test_code": "let\n  expected = [1,2,3]\n  go = 'let\n    List.foldLeft (acc a -> let\n      MyStream.emit (a Nat.+ acc)\n      a\n    ) 0 expected\n  Test.label.deprecated \"ignore returns only the result, not the materialized stream\" <| Test.expect ((MyStream.ignore go) === 3 )"
  },
  {
    "name": "ignore handles empty stream",
    "test_code": "let\n  go = '(List.map MyStream.emit [])\n  Test.label.deprecated \"ignore handles empty stream\" <| Test.expect ((MyStream.ignore go) === [] )"
  },
  {
    "name": "filters stream",
    "test_code": "let\n  expected = [1,2,3,4]\n  go = MyStream.fromList expected |> MyStream.filter isEven\n  Test.label.deprecated \"filters stream\" <| Test.expect (!(MyStream.toList go) === [2,4] )"
  },
  {
    "name": "maps over stream",
    "test_code": "let\n  expected = [1,2,3,4]\n  go = MyStream.fromList expected |> MyStream.map increment\n  Test.label.deprecated \"maps over stream\" <| Test.expect (!(MyStream.toList go) === [2,3,4,5] )"
  },
  {
    "name": "flatMaps over stream",
    "test_code": "let\n  expected = [1,2,3]\n  go = MyStream.fromList expected |> MyStream.flatMap (elem -> !(MyStream.fromList (List.fill 2 elem)))\n  Test.label.deprecated \"flatMaps over stream\" <| Test.expect (!(MyStream.toList go) === [1,1,2,2,3,3] )"
  }
]