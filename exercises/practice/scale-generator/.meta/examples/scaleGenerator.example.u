
chromaticScale = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]
flatChromaticScale = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"]
flatKeys = ["F", "Bb", "Eb", "Ab", "Db", "Gb", "d", "g", "c", "f", "bb", "eb"]

chromatic : Text -> [Text]
chromatic tonic =
  normalizedTonic = normalize tonic
  if List.contains tonic flatKeys then
    maybeI = firstIndexOf normalizedTonic flatChromaticScale
    maybeTup = Optional.map (i -> List.splitAt i flatChromaticScale) maybeI
    maybeScale = Optional.map (cases (newSuffix, newPrefix) -> newPrefix List.++ newSuffix) maybeTup
    Optional.getOrElse [] maybeScale
  else
    maybeI = firstIndexOf normalizedTonic chromaticScale
    maybeTup = Optional.map (i -> List.splitAt i chromaticScale) maybeI
    maybeScale = Optional.map (cases (newSuffix, newPrefix) -> newPrefix List.++ newSuffix) maybeTup
    Optional.getOrElse [] maybeScale

patternToSteps : Char -> Nat
patternToSteps = cases
  ?m -> 1
  ?M -> 2
  ?A -> 3
  _ -> 0

mkPattern : Text -> [Nat]
mkPattern pattern =
  steps = toCharList pattern |> List.map patternToSteps
  List.scanLeft (+) 0 steps |> toList

indexAtWithRotation : Nat -> [a] -> a
indexAtWithRotation n ls =
  size = (List.size ls)
  rotate = Nat.mod n size
  List.unsafeAt rotate ls

normalize : Text -> Text
normalize tonic =
  chars = toCharList tonic
  split = List.splitAt 1 chars
  (fst, scnd) = split
  List.map toUpper fst ++ scnd |> fromCharList

interval : Text -> Text -> [Text]
interval tonic pattern =
  baseLine = chromatic tonic
  charPattern = mkPattern pattern
  List.map (i -> indexAtWithRotation i baseLine) charPattern
