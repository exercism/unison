unique type majorityElement.Color = Red | Orange | Yellow | Green | Blue | Purple

majorityElement.majorityFinder : [majorityElement.Color] -> Optional majorityElement.Color
majorityElement.majorityFinder colors =
  res _ = List.map (c -> !(update c)) colors
  (Counter colorTup, r) = MyStore.runWith (Counter None) res
  Optional.flatMap (cases (_, candidate) -> let
      count = List.filter (elem -> elem === candidate) colors |> List.size
      if count > ((List.size colors) / 2) then Some candidate else None
    ) colorTup

structural ability majorityElement.MyStore a where
  put : a ->{majorityElement.MyStore a} ()
  get : {majorityElement.MyStore a} a

majorityElement.MyStore.runWith : a -> '{MyStore a, g} r -> {g} (a, r)
majorityElement.MyStore.runWith elem storeFunction =
  impl a = cases
    {pure} -> (a, pure)
    {MyStore.get -> resume } -> handle resume a with impl a
    {MyStore.put aa -> resume} -> handle resume () with impl aa
  handle !storeFunction with impl elem

unique type StoredState a = Counter (Optional (Nat, a))

majorityElement.update : a -> '{MyStore (StoredState a)} ()
majorityElement.update newElem _ =
  match MyStore.get with
    Counter None ->
      MyStore.put (Counter (Some (1, newElem)))
    Counter (Some (count, currentElem)) | newElem === currentElem ->
      MyStore.put (Counter (Some ((count + 1), currentElem)))
    Counter (Some (count, currentElem)) | count === 0 ->
      MyStore.put  ( Counter (Some (1, newElem)))
    Counter (Some (count, currentElem)) ->
      MyStore.put (Counter (Some ((count - 1), currentElem)))

