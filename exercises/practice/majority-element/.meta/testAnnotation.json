[
  {
    "name": "should find the simple majority in a list",
    "test_code": "let\n  Test.label.deprecated \"should find the simple majority in a list\" <| Test.expect (majorityFinder [Red, Blue, Red, Red, Yellow] === (Some Red))"
  },
  {
    "name": "should not return value if no majority exists",
    "test_code": "let\n  Test.label.deprecated \"should not return value if no majority exists\" <| Test.expect (majorityFinder [Red, Blue, Green, Yellow] === None)"
  },
  {
    "name": "should not return value if most common element is exactly n/2",
    "test_code": "let\n  Test.label.deprecated \"should not return value if most common element is exactly n/2\" <| Test.expect (majorityFinder [Red, Blue, Red, Green, Red, Yellow] === None)"
  },
  {
    "name": "should not return value if 50/50 split",
    "test_code": "let\n  Test.label.deprecated \"should not return value if 50/50 split\" <| Test.expect (majorityFinder [Red, Red, Blue, Blue, Red, Blue] === None)"
  },
  {
    "name": "should handle empty list case",
    "test_code": "let\n  Test.label.deprecated \"should handle empty list case\" <| Test.expect (majorityFinder [] === None)"
  },
  {
    "name": "majorityElement.test.ex6 _",
    "test_code": "let\n  all =  [Red, Orange, Yellow, Green, Blue]\n  selection = !(gen.oneOf all)\n  fillN = !(gen.natIn 0 (List.size all))\n  mostCommonElems = List.fill fillN selection\n  testList = all List.++ mostCommonElems\n  -- fill + 1 because the element exists in the original list one time\n  expected = if ((fillN + 1) > ((List.size testList) / 2) ) then Some selection else None"
  }
]