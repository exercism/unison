[
  {
    "name": "paired square brackets",
    "test_code": "let\n  Test.label.deprecated \"paired square brackets\" <| Test.expect (isPaired \"[]\" === true)"
  },
  {
    "name": "empty string",
    "test_code": "let\n  Test.label.deprecated \"empty string\" <| Test.expect (isPaired \"\" === true)"
  },
  {
    "name": "unpaired brackets",
    "test_code": "let\n  Test.label.deprecated \"unpaired brackets\" <| Test.expect (isPaired \"[[\" === false)"
  },
  {
    "name": "wrong ordered brackets",
    "test_code": "let\n  Test.label.deprecated \"wrong ordered brackets\" <| Test.expect (isPaired \"}{\" === false)"
  },
  {
    "name": "wrong closing bracket",
    "test_code": "let\n  Test.label.deprecated \"wrong closing bracket\" <| Test.expect (isPaired \"{]\" === false)"
  },
  {
    "name": "paired with whitespace",
    "test_code": "let\n  Test.label.deprecated \"paired with whitespace\" <| Test.expect (isPaired \"{ }\" === true)"
  },
  {
    "name": "partially paired brackets",
    "test_code": "let\n  Test.label.deprecated \"partially paired brackets\" <| Test.expect (isPaired \"{[])\" === false)"
  },
  {
    "name": "simple nested brackets",
    "test_code": "let\n  Test.label.deprecated \"simple nested brackets\" <| Test.expect (isPaired \"{[]}\" === true)"
  },
  {
    "name": "several paired brackets",
    "test_code": "let\n  Test.label.deprecated \"several paired brackets\" <| Test.expect (isPaired \"{}[]\" === true)"
  },
  {
    "name": "paired and nested brackets",
    "test_code": "let\n  Test.label.deprecated \"paired and nested brackets\" <| Test.expect (isPaired \"([{}({}[])])\" === true)"
  },
  {
    "name": "unopened closing brackets",
    "test_code": "let\n  Test.label.deprecated \"unopened closing brackets\" <| Test.expect (isPaired \"{[)][]}\" === false)"
  },
  {
    "name": "unpaired and nested brackets",
    "test_code": "let\n  Test.label.deprecated \"unpaired and nested brackets\" <| Test.expect (isPaired \"([{])\" === false)"
  },
  {
    "name": "paired and wrong nested brackets",
    "test_code": "let\n  Test.label.deprecated \"paired and wrong nested brackets\" <| Test.expect (isPaired \"[({]})\" === false)"
  },
  {
    "name": "paired and incomplete brackets",
    "test_code": "let\n  Test.label.deprecated \"paired and incomplete brackets\" <| Test.expect (isPaired \"{}[\" === false)"
  },
  {
    "name": "too many closing brackets",
    "test_code": "let\n  Test.label.deprecated \"too many closing brackets\" <| Test.expect (isPaired \"[]]\" === false)"
  },
  {
    "name": "early unexpected brackets",
    "test_code": "let\n  Test.label.deprecated \"early unexpected brackets\" <| Test.expect (isPaired \")()\" === false)"
  },
  {
    "name": "early mismatched brackets",
    "test_code": "let\n  Test.label.deprecated \"early mismatched brackets\" <| Test.expect (isPaired \"{)()\" === false)"
  },
  {
    "name": "math expression",
    "test_code": "let\n  Test.label.deprecated \"math expression\" <| Test.expect (isPaired \"(((185 + 223.85) * 15) - 543)/2\" === true)"
  },
  {
    "name": "complex latex expression",
    "test_code": "let\n  Test.label.deprecated \"complex latex expression\" <| Test.expect (isPaired \"\\\\left(\\\\begin{array}{cc} \\\\frac{1}{3} & x\\\\\\\\ \\\\mathrm{e}^{x} &... x^2 \\\\end{array}\\\\right)\" === true)"
  }
]