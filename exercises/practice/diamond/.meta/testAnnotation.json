[
  {
    "name": "Degenerate case with a single 'A' row",
    "test_code": "let\n  Test.label.deprecated \"Degenerate case with a single 'A' row\" <| Test.expect (rows ?A === [\"A\"])"
  },
  {
    "name": "Degenerate case with no row containing 3 distinct groups of spaces",
    "test_code": "let\n  Test.label.deprecated \"Degenerate case with no row containing 3 distinct groups of spaces\" <| Test.expect (rows ?B === [\" A \",\"B B\",\" A \"])"
  },
  {
    "name": "Smallest non-degenerate case with odd diamond side length",
    "test_code": "let\n  Test.label.deprecated \"Smallest non-degenerate case with odd diamond side length\" <| Test.expect (rows ?C === [\"  A  \",\" B B \",\"C   C\",\" B B \",\"  A  \"])"
  },
  {
    "name": "Smallest non-degenerate case with even diamond side length",
    "test_code": "let\n  Test.label.deprecated \"Smallest non-degenerate case with even diamond side length\" <| Test.expect (rows ?D === [\"   A   \",\"  B B  \",\" C   C \",\"D     D\",\" C   C \",\"  B B  \",\"   A   \"])"
  },
  {
    "name": "Largest possible diamond",
    "test_code": "let\n  Test.label.deprecated \"Largest possible diamond\" <| Test.expect (rows ?Z === [\"                         A                         \",\"                        B B                        \",\"                       C   C                       \",\"                      D     D                      \",\"                     E       E                     \",\"                    F         F                    \",\"                   G           G                   \",\"                  H             H                  \",\"                 I               I                 \",\"                J                 J                \",\"               K                   K               \",\"              L                     L              \",\"             M                       M             \",\"            N                         N            \",\"           O                           O           \",\"          P                             P          \",\"         Q                               Q         \",\"        R                                 R        \",\"       S                                   S       \",\"      T                                     T      \",\"     U                                       U     \",\"    V                                         V    \",\"   W                                           W   \",\"  X                                             X  \",\" Y                                               Y \",\"Z                                                 Z\",\" Y                                               Y \",\"  X                                             X  \",\"   W                                           W   \",\"    V                                         V    \",\"     U                                       U     \",\"      T                                     T      \",\"       S                                   S       \",\"        R                                 R        \",\"         Q                               Q         \",\"          P                             P          \",\"           O                           O           \",\"            N                         N            \",\"             M                       M             \",\"              L                     L              \",\"               K                   K               \",\"                J                 J                \",\"                 I               I                 \",\"                  H             H                  \",\"                   G           G                   \",\"                    F         F                    \",\"                     E       E                     \",\"                      D     D                      \",\"                       C   C                       \",\"                        B B                        \",\"                         A                         \"])"
  }
]