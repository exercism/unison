[
  {
    "name": "Finds the largest product if span equals length",
    "test_code": "let\n  digits = \"29\"\n  span = +2\n  Test.label.deprecated \"Finds the largest product if span equals length\" <| Test.expect (largestProduct digits span === Some 18)"
  },
  {
    "name": "Can find the largest product of 2 with numbers in order",
    "test_code": "let\n  digits = \"0123456789\"\n  span = +2\n  Test.label.deprecated \"Can find the largest product of 2 with numbers in order\" <| Test.expect (largestProduct digits span === Some 72)"
  },
  {
    "name": "Can find the largest product of 2",
    "test_code": "let\n  digits = \"576802143\"\n  span = +2\n  Test.label.deprecated \"Can find the largest product of 2\" <| Test.expect (largestProduct digits span === Some 48)"
  },
  {
    "name": "Can find the largest product of 3 with numbers in order",
    "test_code": "let\n  digits = \"0123456789\"\n  span = +3\n  Test.label.deprecated \"Can find the largest product of 3 with numbers in order\" <| Test.expect (largestProduct digits span === Some 504)"
  },
  {
    "name": "Can find the largest product of 3",
    "test_code": "let\n  digits = \"1027839564\"\n  span = +3\n  Test.label.deprecated \"Can find the largest product of 3\" <| Test.expect (largestProduct digits span === Some 270)"
  },
  {
    "name": "Can find the largest product of 5 with numbers in order",
    "test_code": "let\n  digits = \"0123456789\"\n  span = +5\n  Test.label.deprecated \"Can find the largest product of 5 with numbers in order\" <| Test.expect (largestProduct digits span === Some 15120)"
  },
  {
    "name": "Can get the largest product of a big number",
    "test_code": "let\n  digits = \"73167176531330624919225119674426574742355349194934\"\n  span = +6\n  Test.label.deprecated \"Can get the largest product of a big number\" <| Test.expect (largestProduct digits span === Some 23520)"
  },
  {
    "name": "Reports zero if the only digits are zero",
    "test_code": "let\n  digits = \"0000\"\n  span = +2\n  Test.label.deprecated \"Reports zero if the only digits are zero\" <| Test.expect (largestProduct digits span === Some 0)"
  },
  {
    "name": "Reports zero if all spans include zero",
    "test_code": "let\n  digits = \"99099\"\n  span = +3\n  Test.label.deprecated \"Reports zero if all spans include zero\" <| Test.expect (largestProduct digits span === Some 0)"
  },
  {
    "name": "Rejects span longer than string length",
    "test_code": "let\n  digits = \"123\"\n  span = +4\n  Test.label.deprecated \"Rejects span longer than string length\" <| Test.expect (largestProduct digits span === None)"
  },
  {
    "name": "Reports 1 for empty string and empty product (0 span)",
    "test_code": "let\n  digits = \"\"\n  span = +0\n  Test.label.deprecated \"Reports 1 for empty string and empty product (0 span)\" <| Test.expect (largestProduct digits span === Some 1)"
  },
  {
    "name": "Reports 1 for nonempty string and empty product (0 span)",
    "test_code": "let\n  digits = \"123\"\n  span = +0\n  Test.label.deprecated \"Reports 1 for nonempty string and empty product (0 span)\" <| Test.expect (largestProduct digits span === Some 1)"
  },
  {
    "name": "Rejects empty string and nonzero span",
    "test_code": "let\n  digits = \"\"\n  span = +1\n  Test.label.deprecated \"Rejects empty string and nonzero span\" <| Test.expect (largestProduct digits span === None)"
  },
  {
    "name": "Rejects invalid character in digits",
    "test_code": "let\n  digits = \"1234a5\"\n  span = +2\n  Test.label.deprecated \"Rejects invalid character in digits\" <| Test.expect (largestProduct digits span === None)"
  },
  {
    "name": "Rejects negative span",
    "test_code": "let\n  digits = \"12345\"\n  span = -1\n  Test.label.deprecated \"Rejects negative span\" <| Test.expect (largestProduct digits span === None)"
  }
]