[
  {
    "test_code": "allYourBase.test.ex1 = let\n\tTest.label \"single bit one to decimal\" <| Test.expect (rebase +2 [+1] +10 === Some [+1])",
    "name": "allYourBase.test.ex1"
  },
  {
    "test_code": "allYourBase.test.ex2 = let\n\tTest.label \"binary to single decimal\" <| Test.expect (rebase +2 [+1,+0,+1] +10 === Some [+5])",
    "name": "allYourBase.test.ex2"
  },
  {
    "test_code": "allYourBase.test.ex3 = let\n\tTest.label \"single decimal to binary\" <| Test.expect (rebase +10 [+5] +2 === Some [+1,+0,+1])",
    "name": "allYourBase.test.ex3"
  },
  {
    "test_code": "allYourBase.test.ex4 = let\n\tTest.label \"binary to multiple decimal\" <| Test.expect (rebase +2 [+1,+0,+1,+0,+1,+0] +10 === Some [+4,+2])",
    "name": "allYourBase.test.ex4"
  },
  {
    "test_code": "allYourBase.test.ex5 = let\n\tTest.label \"decimal to binary\" <| Test.expect (rebase +10 [+4,+2] +2 === Some [+1,+0,+1,+0,+1,+0])",
    "name": "allYourBase.test.ex5"
  },
  {
    "test_code": "allYourBase.test.ex6 = let\n\tTest.label \"trinary to hexadecimal\" <| Test.expect rebase +3 [+1,+1,+2,+0] +16 === Some [+2,+10])",
    "name": "allYourBase.test.ex6"
  },
  {
    "test_code": "allYourBase.test.ex7 = let\n\tTest.label \"hexadecimal to trinary\" <| Test.expect (rebase +16 [+2,+10] +3 === Some [+1,+1,+2,+0])",
    "name": "allYourBase.test.ex7"
  },
  {
    "test_code": "allYourBase.test.ex8 = let\n\tTest.label \"15-bit integer\" <| Test.expect (rebase +97 [+3,+46,+60] +73 === Some [+6,+10,+45])",
    "name": "allYourBase.test.ex8"
  },
  {
    "test_code": "allYourBase.test.ex9 = let\n\tTest.label \"empty list\" <| Test.expect (rebase +2 [] +10 === Some [+0])",
    "name": "allYourBase.test.ex9"
  },
  {
    "test_code": "allYourBase.test.ex10 = let\n\tTest.label \"single zero\" <| Test.expect (rebase +10 [+0] +2 === Some [+0])",
    "name": "allYourBase.test.ex10"
  },
  {
    "test_code": "allYourBase.test.ex11 = let\n\tTest.label \"multiple zeros\" <| Test.expect (rebase +10 [+0,+0,+0] +2 === Some [+0])",
    "name": "allYourBase.test.ex11"
  },
  {
    "test_code": "allYourBase.test.ex12 = let\n\tTest.label \"leading zeros\" <| Test.expect (rebase +7 [+0,+6,+0] +10 === Some [+4,+2])",
    "name": "allYourBase.test.ex12"
  },
  {
    "test_code": "allYourBase.test.ex13 = let\n\tTest.label \"input base is one\" <| Test.expect (rebase +1 [+0] +10 === None)",
    "name": "allYourBase.test.ex13"
  },
  {
    "test_code": "allYourBase.test.ex14 = let\n\tTest.label \"input base is zero\" <| Test.expect (rebase +0 [] +10 === None)",
    "name": "allYourBase.test.ex14"
  },
  {
    "test_code": "allYourBase.test.ex15 = let\n\tTest.label \"input base is negative\" <| Test.expect (rebase -2 [+1] +10 === None)",
    "name": "allYourBase.test.ex15"
  },
  {
    "test_code": "allYourBase.test.ex16 = let\n\tTest.label \"negative digit\" <| Test.expect (rebase +2 [+1,-1,+1,+0,+1,+0] +10 === None)",
    "name": "allYourBase.test.ex16"
  },
  {
    "test_code": "allYourBase.test.ex17 = let\n\tTest.label \"invalid positive digit\" <| Test.expect (rebase +2 [+1,-1,+1,+0,+1,+0] +10 === None)",
    "name": "allYourBase.test.ex17"
  },
  {
    "test_code": "allYourBase.test.ex18 = let\n\tTest.label \"output base is one\" <| Test.expect (rebase +2 [+1,+2,+1,+0,+1,+0] +10 === None)",
    "name": "allYourBase.test.ex18"
  },
  {
    "test_code": "allYourBase.test.ex19 = let\n\tTest.label \"output base is zero\" <| Test.expect (rebase +2 [+1,+0,+1,+0,+1,+0] +1 === None)",
    "name": "allYourBase.test.ex19"
  },
  {
    "test_code": "allYourBase.test.ex20 = let\n\tTest.label \"output base is negative\" <| Test.expect (rebase +2 [+1] -7 === None)",
    "name": "allYourBase.test.ex20"
  },
  {
    "test_code": "allYourBase.test.ex21 = let\n\tTest.label \"both bases are negative\" <| Test.expect (rebase -2 [+1] -7 === None)",
    "name": "allYourBase.test.ex21"
  }
]
