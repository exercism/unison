[
  {
    "name": "single bit one to decimal",
    "test_code": "let\n  Test.label.deprecated \"single bit one to decimal\" <| Test.expect (rebase +2 [+1] +10 === Some [+1])"
  },
  {
    "name": "binary to single decimal",
    "test_code": "let\n  Test.label.deprecated \"binary to single decimal\" <| Test.expect (rebase +2 [+1,+0,+1] +10 === Some [+5])"
  },
  {
    "name": "single decimal to binary",
    "test_code": "let\n  Test.label.deprecated \"single decimal to binary\" <| Test.expect (rebase +10 [+5] +2 === Some [+1,+0,+1])"
  },
  {
    "name": "binary to multiple decimal",
    "test_code": "let\n  Test.label.deprecated \"binary to multiple decimal\" <| Test.expect (rebase +2 [+1,+0,+1,+0,+1,+0] +10 === Some [+4,+2])"
  },
  {
    "name": "decimal to binary",
    "test_code": "let\n  Test.label.deprecated \"decimal to binary\" <| Test.expect (rebase +10 [+4,+2] +2 === Some [+1,+0,+1,+0,+1,+0])"
  },
  {
    "name": "trinary to hexadecimal",
    "test_code": "let\n  Test.label.deprecated \"trinary to hexadecimal\" <| Test.expect (rebase +3 [+1,+1,+2,+0] +16 === Some [+2,+10])"
  },
  {
    "name": "hexadecimal to trinary",
    "test_code": "let\n  Test.label.deprecated \"hexadecimal to trinary\" <| Test.expect (rebase +16 [+2,+10] +3 === Some [+1,+1,+2,+0])"
  },
  {
    "name": "15-bit integer",
    "test_code": "let\n  Test.label.deprecated \"15-bit integer\" <| Test.expect (rebase +97 [+3,+46,+60] +73 === Some [+6,+10,+45])"
  },
  {
    "name": "empty list",
    "test_code": "let\n  Test.label.deprecated \"empty list\" <| Test.expect (rebase +2 [] +10 === Some [+0])"
  },
  {
    "name": "single zero",
    "test_code": "let\n  Test.label.deprecated \"single zero\" <| Test.expect (rebase +10 [+0] +2 === Some [+0])"
  },
  {
    "name": "multiple zeros",
    "test_code": "let\n  Test.label.deprecated \"multiple zeros\" <| Test.expect (rebase +10 [+0,+0,+0] +2 === Some [+0])"
  },
  {
    "name": "leading zeros",
    "test_code": "let\n  Test.label.deprecated \"leading zeros\" <| Test.expect (rebase +7 [+0,+6,+0] +10 === Some [+4,+2])"
  },
  {
    "name": "input base is one",
    "test_code": "let\n  Test.label.deprecated \"input base is one\" <| Test.expect (rebase +1 [+0] +10 === None)"
  },
  {
    "name": "input base is zero",
    "test_code": "let\n  Test.label.deprecated \"input base is zero\" <| Test.expect (rebase +0 [] +10 === None)"
  },
  {
    "name": "input base is negative",
    "test_code": "let\n  Test.label.deprecated \"input base is negative\" <| Test.expect (rebase -2 [+1] +10 === None)"
  },
  {
    "name": "negative digit",
    "test_code": "let\n  Test.label.deprecated \"negative digit\" <| Test.expect (rebase +2 [+1,-1,+1,+0,+1,+0] +10 === None)"
  },
  {
    "name": "invalid positive digit",
    "test_code": "let\n  Test.label.deprecated \"invalid positive digit\" <| Test.expect (rebase +2 [+1,+2,+1,+0,+1,+0] +10 === None)"
  },
  {
    "name": "output base is one",
    "test_code": "let\n  Test.label.deprecated \"output base is one\" <| Test.expect (rebase +2 [+1,+0,+1,+0,+1,+0] +1 === None)"
  },
  {
    "name": "output base is zero",
    "test_code": "let\n  Test.label.deprecated \"output base is zero\" <| Test.expect (rebase +10 [+7] +0 === None)"
  },
  {
    "name": "output base is negative",
    "test_code": "let\n  Test.label.deprecated \"output base is negative\" <| Test.expect (rebase +2 [+1] -7 === None)"
  },
  {
    "name": "both bases are negative",
    "test_code": "let\n  Test.label.deprecated \"both bases are negative\" <| Test.expect (rebase -2 [+1] -7 === None)"
  }
]